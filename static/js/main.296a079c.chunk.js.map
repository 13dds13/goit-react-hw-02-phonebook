{"version":3,"sources":["components/contactsList/ContactsList.module.css","components/contactForm/ContactForm.module.css","components/container/Container.module.css","components/filter/Filter.module.css","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactsList/ContactsList.js","components/App.js","index.js"],"names":["module","exports","INITIAL_DATA","name","number","ContactForm","state","nameId","nanoid","numberId","submitAndReset","e","preventDefault","contactData","props","handleSubmit","setState","handleChange","target","value","this","dataUI","inputName","inputTel","submitBtn","className","form","onSubmit","htmlFor","input","id","type","pattern","title","required","autoComplete","onChange","btn","Component","Filter","filter","inputSearch","findContactId","styles","wrap","listWrap","listItem","ContactsList","contactsDataToRender","contacts","deleteContact","deleteBtn","noSearchResult","length","map","item","onClick","alertMsg","allContacts","search","titleMain","titleSecondary","App","find","toLowerCase","alert","prev","nameToDelete","filteredContacts","contactsToRender","includes","container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.296a079c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__5OP_4\",\"listItem\":\"ContactsList_listItem__cK-KA\",\"btn\":\"ContactsList_btn__xowcz\",\"name\":\"ContactsList_name__FvRFt\",\"number\":\"ContactsList_number__3Ft3t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2VBEj\",\"btn\":\"ContactForm_btn__1ZhuJ\",\"input\":\"ContactForm_input__1tZiM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2M4wt\",\"title\":\"Container_title__3klKE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__kmQS7\",\"listWrap\":\"Filter_listWrap__1S7Vi\",\"listItem\":\"Filter_listItem__nkLzs\",\"name\":\"Filter_name__2_UY6\",\"number\":\"Filter_number__1x-Va\",\"btn\":\"Filter_btn__2zpCZ\"};","import React, { Component } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\n\r\nconst INITIAL_DATA = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = { ...INITIAL_DATA };\r\n\r\n  nameId = nanoid();\r\n  numberId = nanoid();\r\n\r\n  submitAndReset = (e) => {\r\n    e.preventDefault();\r\n    const contactData = this.state;\r\n    this.props.handleSubmit(contactData);\r\n    this.setState({ ...INITIAL_DATA });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    const { inputName, inputTel, submitBtn } = this.props.dataUI;\r\n    return (\r\n      <form className={form} onSubmit={this.submitAndReset}>\r\n        <label htmlFor={this.nameId}>{inputName}</label>\r\n        <input\r\n          className={input}\r\n          id={this.nameId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          autoComplete=\"off\"\r\n          onChange={this.handleChange}\r\n          value={name}\r\n        />\r\n        <label htmlFor={this.numberId}>{inputTel}</label>\r\n        <input\r\n          className={input}\r\n          id={this.numberId}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          autoComplete=\"off\"\r\n          onChange={this.handleChange}\r\n          value={number}\r\n        />\r\n        <button className={btn} type=\"submit\">\r\n          {submitBtn}\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  handleSubmit: PropTypes.func,\r\n  dataUI: PropTypes.shape({\r\n    inputName: PropTypes.string,\r\n    inputTel: PropTypes.string,\r\n    submitBtn: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ handleChange, filter, inputSearch }) => {\r\n  const findContactId = nanoid();\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <label htmlFor={findContactId}>{inputSearch}</label>\r\n      <input\r\n        id={findContactId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func,\r\n  filter: PropTypes.string,\r\n  inputSearch: PropTypes.string,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsList.module.css\";\r\n\r\nconst { listWrap, listItem, name, number, btn } = styles;\r\n\r\nconst ContactsList = ({\r\n  contactsDataToRender: { title, contacts },\r\n  deleteContact,\r\n  dataUI: { deleteBtn, noSearchResult },\r\n}) => {\r\n  return contacts.length ? (\r\n    <>\r\n      <p>{title}</p>\r\n      <ul className={listWrap}>\r\n        {contacts.map((item) => (\r\n          <li className={listItem} key={item.id}>\r\n            {\" \"}\r\n            <p className={name}>\r\n              {item.name}: <span className={number}>{item.number}</span>\r\n            </p>\r\n            <button\r\n              className={btn}\r\n              name={item.name}\r\n              type=\"button\"\r\n              onClick={() => deleteContact(item.name)}\r\n            >\r\n              {deleteBtn}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noSearchResult}</p>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  deleteContact: PropTypes.func,\r\n  contactsDataToRender: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      })\r\n    ),\r\n  }),\r\n  dataUI: PropTypes.shape({\r\n    deleteBtn: PropTypes.string,\r\n    noSearchResult: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ContactsList;\r\n","import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport INITIAL_DATA from \"../data/initialData.json\";\nimport ContactForm from \"./contactForm/ContactForm\";\nimport Filter from \"./filter/Filter\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport styles from \"./container/Container.module.css\";\nimport dataUI from \"../data/dataUI.json\";\n\nconst {\n  alertMsg,\n  allContacts,\n  search,\n  titleMain,\n  titleSecondary,\n  inputName,\n  inputTel,\n  submitBtn,\n  deleteBtn,\n  inputSearch,\n  noSearchResult,\n} = dataUI;\n\nclass App extends Component {\n  state = {\n    contacts: [...INITIAL_DATA],\n    filter: \"\",\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (contactData) => {\n    const { name, number } = contactData;\n\n    const isAlreadyInContacts = this.state.contacts.find(\n      (item) => item.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isAlreadyInContacts) {\n      alert(`${name} ${alertMsg}`);\n      return;\n    }\n\n    this.setState((prev) => ({\n      contacts: [\n        ...prev.contacts,\n        {\n          name,\n          id: nanoid(),\n          number,\n        },\n      ],\n    }));\n  };\n\n  deleteContact = (nameToDelete) => {\n    const filteredContacts = this.state.contacts.filter(\n      ({ name }) => name !== nameToDelete\n    );\n    this.setState({ contacts: [...filteredContacts] });\n  };\n\n  contactsToRender = ({ contacts, filter }) => {\n    if (!filter) return { contacts, title: `${allContacts}` };\n\n    const filteredContacts = contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return { contacts: filteredContacts, title: `${search}` };\n  };\n\n  render() {\n    const { container, title } = styles;\n    const { filter } = this.state;\n    return (\n      <div className={container}>\n        <h2 className={title}>{titleMain}</h2>\n\n        <ContactForm\n          dataUI={{ inputName, inputTel, submitBtn }}\n          handleSubmit={this.handleSubmit}\n        />\n\n        <h2 className={title}>{titleSecondary}</h2>\n\n        <Filter\n          inputSearch={inputSearch}\n          filter={filter}\n          handleChange={this.handleChange}\n        />\n\n        <ContactsList\n          contactsDataToRender={this.contactsToRender(this.state)}\n          deleteContact={this.deleteContact}\n          dataUI={{ deleteBtn, noSearchResult }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}