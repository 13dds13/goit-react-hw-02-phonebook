{"version":3,"sources":["components/App.js","index.js"],"names":["tempData","id","name","number","App","state","contacts","filter","nameId","nanoid","numberId","findContactId","handleSubmit","e","preventDefault","setState","prev","handleChange","target","value","findContact","str","find","item","include","deleteContact","filteredContacts","onSubmit","this","htmlFor","newId","type","pattern","title","required","autoComplete","onChange","toLowerCase","includes","map","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"uQAGMA,EAAW,CACf,CACEC,GAAI,EACJC,KAAM,QACNC,OAAQ,WAEV,CACEF,GAAI,EACJC,KAAM,QACNC,OAAQ,UAEV,CACEF,GAAI,EACJC,KAAM,OACNC,OAAQ,UAEV,CACEF,GAAI,EACJC,KAAM,OACNC,OAAQ,WAEV,CACEF,GAAI,EACJC,KAAM,SACNC,OAAQ,UAEV,CACEF,GAAI,EACJC,KAAM,MACNC,OAAQ,WAINC,E,4MACJC,MAAQ,CACNC,SAAUN,EACVO,OAAQ,GACRL,KAAM,GACNC,OAAQ,I,EAGVK,OAASC,c,EACTC,SAAWD,c,EACXE,cAAgBF,c,EAEhBG,aAAe,SAACC,GACdA,EAAEC,iBACF,EAAKC,UAAS,SAACC,GAAD,MAAW,CACvBV,SAAS,GAAD,mBACHU,EAAKV,UADF,CAEN,CAAEJ,KAAM,EAAKG,MAAMH,KAAMD,GAAIQ,cAAUN,OAAQ,EAAKE,MAAMF,e,EAKhEc,aAAe,SAACJ,GACd,EAAKE,SAAL,eAAiBF,EAAEK,OAAOhB,KAAOW,EAAEK,OAAOC,S,EAG5CC,YAAc,SAACC,GAIb,OAHqB,EAAKhB,MAAMC,SAASgB,MAAK,SAACC,GAAD,OAC5CA,EAAKrB,KAAKsB,QAAQH,O,EAKtBI,cAAgB,SAACvB,GACf,IAAMwB,EAAmB,EAAKrB,MAAMC,SAASC,QAC3C,SAACgB,GAAD,OAAUA,EAAKrB,OAASA,KAE1B,EAAKa,SAAS,CAAET,SAAS,YAAKoB,M,4CAGhC,WAAU,IAAD,OACP,OACE,qCACE,2CACA,uBAAMC,SAAUC,KAAKhB,aAArB,UACE,uBAAOiB,QAASD,KAAKE,MAArB,yBACA,uBACE7B,GAAI2B,KAAKE,MACTC,KAAK,OACL7B,KAAK,OACL8B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,MACbC,SAAUR,KAAKX,aACfE,MAAOS,KAAKvB,MAAMH,OAEpB,uBAAO2B,QAASD,KAAKlB,SAArB,0BACA,uBACET,GAAI2B,KAAKlB,SACTqB,KAAK,MACL7B,KAAK,SACL8B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,aAAa,MACbC,SAAUR,KAAKX,aACfE,MAAOS,KAAKvB,MAAMF,SAEpB,wBAAQ4B,KAAK,SAAb,gCAEF,0CAUA,uBAAOF,QAASD,KAAKjB,cAArB,mCACA,uBACEV,GAAI2B,KAAKjB,cACToB,KAAK,OACL7B,KAAK,SACL8B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,MACbC,SAAUR,KAAKX,aACfE,MAAOS,KAAKvB,MAAME,SAEnBqB,KAAKvB,MAAME,QACV,6BACGqB,KAAKvB,MAAMC,SACTC,QAAO,SAACgB,GAAD,OACNA,EAAKrB,KAAKmC,cAAcC,SAAS,EAAKjC,MAAME,WAE7CgC,KAAI,SAAChB,GAAD,OACH,+BACG,IACD,8BACGA,EAAKrB,KADR,KACgBqB,EAAKpB,UAErB,wBACE4B,KAAK,SACLS,QAAS,kBAAM,EAAKf,cAAcF,EAAKrB,OAFzC,sBALOqB,EAAKtB,gB,GApGZwC,aAwHHrC,ICvJfsC,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.5964810a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst tempData = [\n  {\n    id: 1,\n    name: \"Homer\",\n    number: \"4856987\",\n  },\n  {\n    id: 2,\n    name: \"Marge\",\n    number: \"648546\",\n  },\n  {\n    id: 3,\n    name: \"Bart\",\n    number: \"759584\",\n  },\n  {\n    id: 4,\n    name: \"Lisa\",\n    number: \"7951320\",\n  },\n  {\n    id: 5,\n    name: \"Maggie\",\n    number: \"635455\",\n  },\n  {\n    id: 6,\n    name: \"Abe\",\n    number: \"000000\",\n  },\n];\n\nclass App extends Component {\n  state = {\n    contacts: tempData,\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n\n  nameId = nanoid();\n  numberId = nanoid();\n  findContactId = nanoid();\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState((prev) => ({\n      contacts: [\n        ...prev.contacts,\n        { name: this.state.name, id: nanoid(), number: this.state.number },\n      ],\n    }));\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  findContact = (str) => {\n    const filteredList = this.state.contacts.find((item) =>\n      item.name.include(str)\n    );\n    return filteredList;\n  };\n\n  deleteContact = (name) => {\n    const filteredContacts = this.state.contacts.filter(\n      (item) => item.name !== name\n    );\n    this.setState({ contacts: [...filteredContacts] });\n  };\n\n  render() {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor={this.newId}>Enter name:</label>\n          <input\n            id={this.newId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            autoComplete=\"off\"\n            onChange={this.handleChange}\n            value={this.state.name}\n          />\n          <label htmlFor={this.numberId}>Enter number</label>\n          <input\n            id={this.numberId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            autoComplete=\"off\"\n            onChange={this.handleChange}\n            value={this.state.number}\n          />\n          <button type=\"submit\">Add to contacts</button>\n        </form>\n        <h2>Contacts</h2>\n        {/* <ul>\n          {this.state.contacts.map(item => (\n            <li key={item.id}>\n              <p>\n                {item.name}: <span>{item.number}</span>{' '}\n              </p>\n            </li>\n          ))}\n        </ul> */}\n        <label htmlFor={this.findContactId}>Find contacts by name</label>\n        <input\n          id={this.findContactId}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          autoComplete=\"off\"\n          onChange={this.handleChange}\n          value={this.state.filter}\n        />\n        {this.state.filter && (\n          <ul>\n            {this.state.contacts\n              .filter((item) =>\n                item.name.toLowerCase().includes(this.state.filter)\n              )\n              .map((item) => (\n                <li key={item.id}>\n                  {\" \"}\n                  <p>\n                    {item.name}: {item.number}\n                  </p>\n                  <button\n                    type=\"button\"\n                    onClick={() => this.deleteContact(item.name)}\n                  >\n                    Delete\n                  </button>\n                </li>\n              ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}