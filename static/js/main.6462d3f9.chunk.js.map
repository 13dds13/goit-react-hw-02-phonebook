{"version":3,"sources":["components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactsList/ContactsList.js","components/App.js","index.js"],"names":["ContactForm","state","name","number","nameId","nanoid","numberId","handleChange","e","target","value","setState","this","onSubmit","props","handleSubmit","htmlFor","id","type","pattern","title","required","autoComplete","onChange","Component","Filter","findContactId","deleteContact","filter","contacts","item","toLowerCase","includes","map","onClick","ContactsList","App","INITIAL_DATA","preventDefault","newName","newNumber","find","alert","prev","nameToDelete","filteredContacts","ReactDOM","render","document","getElementById"],"mappings":"mkBAIMA,E,4MACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,OAASC,c,EACTC,SAAWD,c,EAEXE,aAAe,SAACC,GACd,MAAwBA,EAAEC,OAAlBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBT,EAAOQ,K,4CAG1B,WACE,MAAyBE,KAAKX,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,uBAAMU,SAAUD,KAAKE,MAAMC,aAA3B,UACE,uBAAOC,QAASJ,KAAKR,OAArB,yBACA,uBACEa,GAAIL,KAAKR,OACTc,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,MACbC,SAAUX,KAAKL,aACfG,MAAOR,IAET,uBAAOc,QAASJ,KAAKN,SAArB,0BACA,uBACEW,GAAIL,KAAKN,SACTY,KAAK,MACLhB,KAAK,SACLiB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,aAAa,MACbC,SAAUX,KAAKL,aACfG,MAAOP,IAET,wBAAQe,KAAK,SAAb,oC,GA1CkBM,aAoDXxB,ICCAyB,EAtDA,SAAC,GAMT,IALLC,EAKI,EALJA,cACAC,EAII,EAJJA,cACApB,EAGI,EAHJA,aACAqB,EAEI,EAFJA,OACAC,EACI,EADJA,SAEA,OACE,qCACE,uBAAOb,QAASU,EAAhB,mCACA,uBACET,GAAIS,EACJR,KAAK,OACLhB,KAAK,SACLiB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,MACbC,SAAUhB,EACVG,MAAOkB,IAERA,GACC,6BACGC,EACED,QAAO,SAACE,GAAD,OAAUA,EAAK5B,KAAK6B,cAAcC,SAASJ,MAClDK,KAAI,SAACH,GAAD,OACH,+BACG,IACD,8BACGA,EAAK5B,KADR,KACgB4B,EAAK3B,UAErB,wBACED,KAAM4B,EAAK5B,KACXgB,KAAK,SACLgB,QAAS,kBAAMP,EAAcG,EAAK5B,OAHpC,sBALO4B,EAAKb,aCGbkB,EA7BM,SAAC,GAAyC,IAAvCN,EAAsC,EAAtCA,SAAUD,EAA4B,EAA5BA,OAAQD,EAAoB,EAApBA,cACxC,OACGC,GACC,6BACGC,EAASI,KAAI,SAACH,GAAD,OACZ,+BACE,8BACGA,EAAK5B,KADR,KACe,+BAAO4B,EAAK3B,SAAe,OAE1C,wBACED,KAAM4B,EAAK5B,KACXgB,KAAK,SACLgB,QAAS,kBAAMP,EAAcG,EAAK5B,OAHpC,sBAJO4B,EAAKb,UCDlBmB,E,4MACJnC,MAAQ,CACN4B,SAAS,YAAKQ,GACdT,OAAQ,I,EAGVF,cAAgBrB,c,EAEhBE,aAAe,SAACC,GACd,MAAwBA,EAAEC,OAAlBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBT,EAAOQ,K,EAG1BK,aAAe,SAACP,GACdA,EAAE8B,iBACF,MAAyB9B,EAAEC,OAAnBP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACRoC,EAAUrC,EAAKQ,MACf8B,EAAYrC,EAAOO,MAEG,EAAKT,MAAM4B,SAASY,MAC9C,qBAAGvC,KAAgB6B,gBAAkBQ,EAAQR,iBAI7CW,MAAM,GAAD,OAAIH,EAAJ,4BAIP,EAAK5B,UAAS,SAACgC,GAAD,MAAW,CACvBd,SAAS,GAAD,mBACHc,EAAKd,UADF,CAEN,CACE3B,KAAMqC,EACNtB,GAAIZ,cACJF,OAAQqC,U,EAMhBb,cAAgB,SAACiB,GACf,IAAMC,EAAmB,EAAK5C,MAAM4B,SAASD,QAC3C,qBAAG1B,OAAoB0C,KAEzB,EAAKjC,SAAS,CAAEkB,SAAS,YAAKgB,M,4CAGhC,WACE,MAA6BjC,KAAKX,MAA1B4B,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,OAClB,OACE,gCACE,2CACA,cAAC,EAAD,CAAab,aAAcH,KAAKG,eAChC,0CACA,cAAC,EAAD,CACEc,SAAUA,EACVD,OAAQA,EACRrB,aAAcK,KAAKL,aACnBoB,cAAef,KAAKe,cACpBD,cAAed,KAAKc,gBAEtB,cAAC,EAAD,CACEG,SAAUA,EACVD,OAAQA,EACRD,cAAef,KAAKe,uB,GAhEZH,aAuEHY,ICzEfU,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.6462d3f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameId = nanoid();\r\n  numberId = nanoid();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.props.handleSubmit}>\r\n        <label htmlFor={this.nameId}>Enter name:</label>\r\n        <input\r\n          id={this.nameId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          autoComplete=\"off\"\r\n          onChange={this.handleChange}\r\n          value={name}\r\n        />\r\n        <label htmlFor={this.numberId}>Enter number</label>\r\n        <input\r\n          id={this.numberId}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          autoComplete=\"off\"\r\n          onChange={this.handleChange}\r\n          value={number}\r\n        />\r\n        <button type=\"submit\">Add to contacts</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  handleSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({\r\n  findContactId,\r\n  deleteContact,\r\n  handleChange,\r\n  filter,\r\n  contacts,\r\n}) => {\r\n  return (\r\n    <>\r\n      <label htmlFor={findContactId}>Find contacts by name</label>\r\n      <input\r\n        id={findContactId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n      {filter && (\r\n        <ul>\r\n          {contacts\r\n            .filter((item) => item.name.toLowerCase().includes(filter))\r\n            .map((item) => (\r\n              <li key={item.id}>\r\n                {\" \"}\r\n                <p>\r\n                  {item.name}: {item.number}\r\n                </p>\r\n                <button\r\n                  name={item.name}\r\n                  type=\"button\"\r\n                  onClick={() => deleteContact(item.name)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  findContactId: PropTypes.string,\r\n  deleteContact: PropTypes.func,\r\n  handleChange: PropTypes.func,\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsList = ({ contacts, filter, deleteContact }) => {\r\n  return (\r\n    !filter && (\r\n      <ul>\r\n        {contacts.map((item) => (\r\n          <li key={item.id}>\r\n            <p>\r\n              {item.name}: <span>{item.number}</span>{\" \"}\r\n            </p>\r\n            <button\r\n              name={item.name}\r\n              type=\"button\"\r\n              onClick={() => deleteContact(item.name)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  deleteContact: PropTypes.func,\r\n  filter: PropTypes.string,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nexport default ContactsList;\r\n","import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport INITIAL_DATA from \"../data/initialData.json\";\nimport ContactForm from \"./contactForm/ContactForm\";\nimport Filter from \"./filter/Filter\";\nimport ContactsList from \"./contactsList/ContactsList\";\n\nclass App extends Component {\n  state = {\n    contacts: [...INITIAL_DATA],\n    filter: \"\",\n  };\n\n  findContactId = nanoid();\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = e.target;\n    const newName = name.value;\n    const newNumber = number.value;\n\n    const isAlreadyInContacts = this.state.contacts.find(\n      ({ name }) => name.toLowerCase() === newName.toLowerCase()\n    );\n\n    if (isAlreadyInContacts) {\n      alert(`${newName} is already in contacts`);\n      return;\n    }\n\n    this.setState((prev) => ({\n      contacts: [\n        ...prev.contacts,\n        {\n          name: newName,\n          id: nanoid(),\n          number: newNumber,\n        },\n      ],\n    }));\n  };\n\n  deleteContact = (nameToDelete) => {\n    const filteredContacts = this.state.contacts.filter(\n      ({ name }) => name !== nameToDelete\n    );\n    this.setState({ contacts: [...filteredContacts] });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm handleSubmit={this.handleSubmit} />\n        <h2>Contacts</h2>\n        <Filter\n          contacts={contacts}\n          filter={filter}\n          handleChange={this.handleChange}\n          deleteContact={this.deleteContact}\n          findContactId={this.findContactId}\n        />\n        <ContactsList\n          contacts={contacts}\n          filter={filter}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}